select(!c(mult_indx,lib_indx,gov_indx,cent_indx,relig_indx,schl_indx,apt_indx,
club_indx,fire_indx,vet_indx,sen_indx))
#calc missingness by checking which addresses are in structure list
sum(is.na(polltest$location_category))/9262 #12.8% missing
####### save to csv
#set directory
setwd(D3)
write.csv(polltest, 'polllocation_structure_and_keyword.csv')
#plot categories
ggplot(data=polltest, aes(x=location_category))+
geom_histogram(stat='count')
#Nathaniel Flemming
#11/10/23
# examining the overlap between different categories
library(tidyverse)
library(scales) #plotting
######## Directories
# polling location data
D1 = 'C:/Users/natha/OneDrive/Documents/GitHub/polling_locations/Data/Polling_locations'
# Structures data
D2 = 'C:/Users/natha/OneDrive/Documents/GitHub/polling_locations/Data/Structures'
#Where the results are saved
D3 = 'C:/Users/natha/OneDrive/Documents/GitHub/polling_locations/Data'
########################################### read in data
setwd(D3)
gov_struct_matrix<-read.csv('structure_matrix.csv')
#Nathaniel Flemming 17 9 23
### categorizing polling locations using structure data
library(dplyr)
library(stringr) #string manipulation
######## Directories
# polling location data
D1 = 'C:/Users/natha/OneDrive/Documents/GitHub/polling_locations/Data/Polling_locations'
# Structures data
D2 = 'C:/Users/natha/OneDrive/Documents/GitHub/polling_locations/Data/Structures'
#Where the results are saved
D3 = 'C:/Users/natha/OneDrive/Documents/GitHub/polling_locations/Data'
################# Define functions
## string for abbreviating street names
rep_str <- c(' STREET'=' ST', ' ROAD'=' RD', ' AVENUE'=' AVE', ' DRIVE'=' DR',
' BOULEVARD'=' BLVD',
' NORTH'=' N', ' SOUTH'=' S', ' EAST'=' E', ' WEST'=' W')
#define a functions
## processing structure data
process_struct_data<-function(df, street_var, city_var, state_var, zip_var, structure_name){
df<-df %>%
# JUST PA
filter(df[[state_var]]=='PA')
### construct and trim to addresses and indicator
df$address<-toupper(paste0(df[[street_var]],', ',df[[city_var]],
', ',df[[state_var]],' ',substr(df[[zip_var]],1,5)))
df$address<-lapply(df$address, toString)
df$location_category=structure_name
df<-df%>%
select(address, location_category)
df <- as.data.frame(lapply(df, unlist))
}
## processing national map data (keep fcode and ftype)
process_nat_map_data<-function(df, street_var, city_var, state_var, zip_var, structure_name){
### construct and trim to addresses and indicator
df$address<-toupper(paste0(df[[street_var]],', ',df[[city_var]],
', ',df[[state_var]],' ',substr(df[[zip_var]],1,5)))
df$address<-lapply(df$address, toString)
df$location_category=structure_name
df<-df%>%
select(address, location_category, fcode, ftype)
df <- as.data.frame(lapply(df, unlist))
}
########################################################read in and process data
#set directory
setwd(D1)
##read in polling locations
poll<-read.csv('polllocation2020.csv')
###remove old categorization
poll<-subset(poll, select=-c(location_category))
### abbreviate street names
poll$address<-str_replace_all(poll$address, rep_str)
#reset directory
setwd(D2)
## places of worship
worship<-read.csv('All_Places_Of_Worship_PA_HIFLD.csv')
### construct and trim to addresses and indicator
worship<-process_struct_data(worship, 'STREET', 'CITY', 'STATE', 'ZIP', 'religious')
### abbreviate street names
worship$address<-str_replace_all(worship$address, rep_str)
## Education buildings
education1<-read.csv('Educational_Structures_NGDA_2023/Colleges_Universities_0.csv')
education2<-read.csv('Educational_Structures_NGDA_2023/Schools_2.csv')
education3<-read.csv('Educational_Structures_NGDA_2023/Technical_Trade_Schools_1.csv')
### combine educations buildings
education = rbind(education1, education2, education3)
rm(education1, education2, education3)
### construct and trim to addresses and indicator
education<-process_struct_data(education, 'ADDRESS', 'CITY', 'STATE', 'ZIPCODE', 'school')
### abbreviate street names
education$address<-str_replace_all(education$address, rep_str)
### private schools
education_priv<-read.csv('Private_Schools_HIFLD.csv')
### construct and trim to addresses and indicator
education_priv<-process_struct_data(education_priv, 'ADDRESS', 'CITY', 'STATE', 'ZIP', 'school')
### abbreviate street names
education_priv$address<-str_replace_all(education_priv$address, rep_str)
### rbind public and private schools, remove duplicates
education = rbind(education, education_priv)
education <-
education %>%
distinct()
## fire stations
firestations<-read.csv('Fire_Stations_HIFLD.csv')
### construct and trim to addresses and indicator
firestations<-process_struct_data(firestations, 'ADDRESS', 'CITY', 'STATE', 'ZIPCODE', 'firestation')
### abbreviate street names
firestations$address<-str_replace_all(firestations$address, rep_str)
## law enforcement
policestations<-read.csv('Law_Enforcement_Structures_NGDA_2023/Police_Stations_0.csv')
### construct and trim to addresses and indicator
policestations<-process_struct_data(policestations, 'ADDRESS', 'CITY', 'STATE', 'ZIPCODE', 'policestation')
### abbreviate street names
policestations$address<-str_replace_all(policestations$address, rep_str)
## libraries
libraries<-read.csv('Libraries_HIFLD_19_4_23.csv')
### construct and trim to addresses and indicator
libraries<-process_struct_data(libraries, 'Address', 'City', 'State', 'ZipCode', 'library')
### abbreviate street names
libraries$address<-str_replace_all(libraries$address, rep_str)
################# county specific structure data
allegheny<-read.csv('AlleghenyCounty_publicbldgs2023.csv')
### construct and trim to addresses and indicator
allegheny$STATE<-'PA'
allegheny<-process_struct_data(allegheny, 'address', 'city', 'STATE', 'zipcode', 'government')
### abbreviate street names
allegheny$address<-str_replace_all(allegheny$address, rep_str)
################ national map data
nat_map<-read.csv('nat_map_PA.csv')
### ftype to structure type
###     fcode to structure (more specific category, w/in type)
# 730: education
##    02: school
##    03: school, elementary
##    04: school, middle
##    05: school, high
##    06: school, college/university
##    07: school, technical/trade
# 740: Emergency response and law enforcement
##    01: ambulance service
##    26: fire station/EMS
##    34: Law enforcement
##    36: prison
# 780: mail and shipping
##    06: post office
# 800: health and medicine
##    12: Hospital/medical center
# 820: Public attractions and landmark buildings
##    07: Cabin
##    08: Campground
##    10: Cemetery
##    18: Historic site/point of interest
##    34: National Symbol/Monument
##    40: Picnic area
##    47: Trailhead
##    48: Visitor/information center
# 830: government and military
##    04: US Capitol
##    06: State Capitol
##    08: US Supreme court
##    10: State Supreme Court
##    11: Court House
##    23: headquarters
##    33: ranger station
##    42: white house
##    44: City/town hall
#create address variable
nat_map2<-process_nat_map_data(nat_map, 'address', 'city', 'state', 'zipcode', 'placeholder')
### abbreviate street names
nat_map2$address<-str_replace_all(nat_map2$address, rep_str)
#add ftype and fcode to data frame
nat_map2$fcode<-nat_map$fcode
nat_map2$ftype<-nat_map$ftype
## code buildings
location.type <- c(school=730)
location.code <- c(firestation=74026, policestation=74034, postoffice=78006,
courthouse=83011, rangerstation=83033, citytownhall=83044)
nat_map2$location_category <- names(location.type)[match(nat_map2$ftype, location.type)]
nat_map2$location_category <- names(location.code)[match(nat_map2$fcode, location.code)]
## drop ftype and fcode
nat_map2<-subset(nat_map2, select = -c(ftype,fcode))
########################################### merge poll locations and structures
## one building can be multiple categories
### mark whether building is a category
### since issue with duplication one building is on multiple lists
structures<-rbind(worship, education, firestations, policestations, allegheny,
nat_map2, libraries)
structures<-structures%>%
mutate(religious=as.numeric(str_detect(location_category, 'religious')),
school=as.numeric(str_detect(location_category, 'school')),
firestation=as.numeric(str_detect(location_category, 'firestation')),
policestation=as.numeric(str_detect(location_category, 'policestation')),
postoffice=as.numeric(str_detect(location_category, 'postoffice')),
courthouse=as.numeric(str_detect(location_category, 'courthouse')),
rangerstation=as.numeric(str_detect(location_category, 'rangerstation')),
citytownhall=as.numeric(str_detect(location_category, 'citytownhall')),
library=as.numeric(str_detect(location_category, 'library')))
#remove uncategorized structures
structures<-structures[complete.cases(structures),]
############# merge
polltest<-left_join(poll, structures, 'address', relationship='many-to-many')
#remove duplicates
polltest<-unique(polltest)
## save a copy of structure categorization matrix
setwd(D3)
write.csv(polltest, 'structure_matrix.csv')
#location category count instead of location category to see what's multiple coded
polltest<-polltest%>%
group_by(address, precinct_id)%>%
mutate(location_count = sum(across(c(religious,school,firestation,
policestation,postoffice,courthouse,
rangerstation,citytownhall))))
#change locations with two categories to 'multiple' to check missingness
polltest$location_category[polltest$location_count>1]<-'multiple'
#remove individual categories and location count
polltest<-subset(polltest, select=-c(religious,school,firestation,
policestation,postoffice,courthouse,
rangerstation,citytownhall, library))
#remove duplicates
polltest<-unique(polltest)
##(still have extra rows for some reason)
#calc missingness by checking which addresses are in structure list
(1-sum(poll$address%in%structures$address))/9235 #60.9% missing
####### save to csv
#set directory
setwd(D3)
write.csv(polltest, 'polllocation_and_structure.csv')
#Nathaniel Flemming
#11/10/23
# examining the overlap between different categories
library(tidyverse)
library(scales) #plotting
######## Directories
# polling location data
D1 = 'C:/Users/natha/OneDrive/Documents/GitHub/polling_locations/Data/Polling_locations'
# Structures data
D2 = 'C:/Users/natha/OneDrive/Documents/GitHub/polling_locations/Data/Structures'
#Where the results are saved
D3 = 'C:/Users/natha/OneDrive/Documents/GitHub/polling_locations/Data'
########################################### read in data
setwd(D3)
gov_struct_matrix<-read.csv('structure_matrix.csv')
keyword_matrix <- read.csv('keyword_matrix.csv')
# Nathaniel Flemming 27 9 23
## coding missing polling locations with keywords
library(dplyr)
library(stringr) #string manipulation
library(ggplot2) #plotting
######## Directories
# polling location data
D1 = 'C:/Users/natha/OneDrive/Documents/GitHub/polling_locations/Data/Polling_locations'
# Structures data
D2 = 'C:/Users/natha/OneDrive/Documents/GitHub/polling_locations/Data/Structures'
#Where the results are saved
D3 = 'C:/Users/natha/OneDrive/Documents/GitHub/polling_locations/Data'
############################## define function
# Function to create vector of places that contain a category word in their name
pollnamegrepl<-function(words, index){
index<-(grepl(words[1], poll$name))
for(i in 2:length(words)){
temp<-(grepl(words[i], poll$name))
index<-index|temp
}
index
}
############################ read in poll locations
setwd(D3)
poll<-read.csv('polllocation_and_structure.csv')
#################### pre-clean
#remove numbers from the beginning of location names
nums<-(str_detect(poll$name, "^[:digit:][:digit:]\\/[:digit:][:digit:]"))
poll$name[nums]<-substr(poll$name[nums],7,100)
###################### keywords
#school words
schl_wrds<-c('SCHOOL','ELEMENTARY','ELEM','ACADEMY', 'ACCADEMY', 'UNIVERSITY',
' SCH ',' COLLEGE ', 'COMMUNITY COLLEGE', 'COMMUNITY COLL',
'JR HIGH','JR. HIGH',
'SR. HIGH', 'SR HIGH', 'HIGH SCH', 'MIDDLE SCH')
schl_indx<-c()
#vector of school polling locations
schl_indx<-as.numeric(pollnamegrepl(schl_wrds, schl_indx))
#religion related words
relig_wrds<-c('CHURCH','MEETINGHOUSE','MEETING HOUSE','SYNAGOGUE','PARISH','TEMPLE',
'CHAPEL',' CH ', 'CATHEDRAL', 'CONGREGATION', 'MOSQUE', 'CHRISTIAN',
'LUTHERAN','METHODIST','SALVATION ARMY', 'MINISTRY',
'KNIGHTS OF COLUMBUS' , 'YMCA', 'Y.M.C.A','Y M C A', 'JCC',
'MASONIC','INCARNATION', 'OF GOD', 'PRAYER', 'GOSPEL', 'JEWISH',
'WORSHIP', 'APOSTOLIC', 'MINISTRIES', 'OUR LADY', 'HOLY TRINITY',
'MUSLIM')
relig_indx<-c()
#vector of religious polling locations
relig_indx<-pollnamegrepl(relig_wrds, relig_indx)
#Abbreviations for saint and church
abbr_indx<-str_detect(poll$name, "(^ST[:space:])|(^ST\\.[:space:]*)|([:space:]CH$)")
relig_indx<-relig_indx|abbr_indx
relig_indx<-as.numeric(relig_indx)
#public center words
cent_wrds<-c('REC CENTER','REC CTR','REC CENT','RECREATION CENT','RECREATION CTR',
'RECREATION BUILDING', 'RECREATION HALL',
'COMMUNITY CENTER', 'COMM CENTER', 'COM CENTER', 'COM CTR', 'COMM CTR',
'COMMUNITY CTR',
'COMMUNITY BLDG', 'COMMUNITY BUILDING', 'COMMUNITY HALL',
'CIVIC CENTER')
cent_indx<-c()
#vector of public center polling locations
cent_indx<-as.numeric(pollnamegrepl(cent_wrds, cent_indx))
#Fire dept words
fire_wrds<-c('FIRE','V.F.D.','VFD','V F D', 'V F C','VFC','V.F.C.','ENGINE HOUSE',
'HOSE')
fire_indx<-c()
#vector of fire dept polling locations
fire_indx<-as.numeric(pollnamegrepl(fire_wrds, fire_indx))
#government building words
gov_wrds<-c(' MUNI ',' MUNIC ', 'MUNICIPAL', ' BORO ','BOROUGH','TOWNSHIP','TWP',
'CITY HALL','TOWN HALL', 'COUNCIL', 'MUN BLDG',
'GOVERNMENT','COURT HOUSE', 'COURT', 'COURTHOUSE', 'ARMORY',
'ADMINSTRATION', 'ADMINISTRATIVE') #memorial halls?
gov_indx<-c()
#vector of government building polling locations
gov_indx<-pollnamegrepl(gov_wrds, gov_indx)
#Abbreviation for borough
boro_indx<-str_detect(poll$name, "(^BORO[:space:])")
gov_indx<-gov_indx|boro_indx
gov_indx<-as.numeric(gov_indx)
#club word
#vector of club polling locations
club_indx<-as.numeric(grepl('CLUB', poll$name))
#apartment words
apt_wrds<-c(' APT ', ' APTS ','APARTMENT','TOWERS','TOWER','PRIVATE RESIDENCE')
apt_indx<-c()
#vector of apartment polling locations
apt_indx<-pollnamegrepl(apt_wrds, apt_indx)
#Abbreviation for apartment
ab_indx<-str_detect(poll$name, "(^APT[:space:])|([:space:]APTS$)")
apt_indx<-apt_indx|ab_indx
apt_indx<-as.numeric(apt_indx)
#library word
#vector of library polling locations
lib_indx<-as.numeric(grepl('LIBRARY', poll$name))
#Veterans association words
vet_wrds<-c('VFW', 'V F W', 'AMERICAN LEGION', 'AMER LEGION', 'VETERANS')
vet_indx<-c()
#vector of veterans association polling locations
vet_indx<-as.numeric(pollnamegrepl(vet_wrds, vet_indx))
#Senior center words
sen_wrds<-c('SENIOR CENTER', 'SENIOR CITIZEN\'S CENTER', 'SENIOR CITIZENS',
'SENIOR CITIZEN', 'SENIOR CENTER', 'SR CENTER', 'SR CITZ', 'SR CITIZEN',
'RETIREMENT CENTER', 'RETIREMENT COMM', 'RET. COM.', 'RETIREMENT HOME',
'BRITH SHOLOM')
sen_indx<-c()
#vector of senior center polling locations
sen_indx<-as.numeric(pollnamegrepl(sen_wrds, sen_indx))
################### master index combining all location vectors
master_index<-as.data.frame(cbind(lib_indx, gov_indx, cent_indx, relig_indx,
schl_indx, apt_indx,club_indx, fire_indx,
vet_indx, sen_indx))
# create new category for locations with multiple keywords
master_index<-master_index%>%
mutate(hold = rowSums(across(c(lib_indx, gov_indx, cent_indx, relig_indx,
schl_indx, apt_indx,club_indx, fire_indx,
vet_indx, sen_indx)))) %>%
mutate(mult_indx = case_when(hold == 0 ~ 0, hold == 1 ~ 0,
.default = 1))
## save copy of matrix
setwd(D3)
write.csv(master_index, 'keyword_matrix.csv')
############## merge poll and keyword index
polltest<-cbind(poll, master_index)
#add in keyword codings conditionally
polltest<-polltest%>%
mutate(location_category = case_when(mult_indx==1&is.na(location_category) ~ 'multiple',
lib_indx==1&is.na(location_category) ~ 'library',
gov_indx==1&is.na(location_category) ~ 'citytownhall',
cent_indx==1&is.na(location_category) ~ 'reccenter',
relig_indx==1&is.na(location_category) ~ 'religious',
schl_indx==1&is.na(location_category) ~ 'school',
apt_indx==1&is.na(location_category) ~ 'apartment',
club_indx==1&is.na(location_category) ~ 'club',
fire_indx==1&is.na(location_category) ~ 'firestation',
vet_indx==1&is.na(location_category) ~ 'veteran',
sen_indx==1&is.na(location_category) ~ 'senior',
.default = location_category)) %>%
#remove columns
select(!c(mult_indx,lib_indx,gov_indx,cent_indx,relig_indx,schl_indx,apt_indx,
club_indx,fire_indx,vet_indx,sen_indx))
#calc missingness by checking which addresses are in structure list
sum(is.na(polltest$location_category))/9262 #12.8% missing
####### save to csv
#set directory
setwd(D3)
write.csv(polltest, 'polllocation_structure_and_keyword.csv')
#plot categories
ggplot(data=polltest, aes(x=location_category))+
geom_histogram(stat='count')
#Nathaniel Flemming
#11/10/23
# examining the overlap between different categories
library(tidyverse)
library(scales) #plotting
######## Directories
# polling location data
D1 = 'C:/Users/natha/OneDrive/Documents/GitHub/polling_locations/Data/Polling_locations'
# Structures data
D2 = 'C:/Users/natha/OneDrive/Documents/GitHub/polling_locations/Data/Structures'
#Where the results are saved
D3 = 'C:/Users/natha/OneDrive/Documents/GitHub/polling_locations/Data'
########################################### read in data
setwd(D3)
gov_struct_matrix<-read.csv('structure_matrix.csv')
keyword_matrix <- read.csv('keyword_matrix.csv')
#############################################government structure overlap
# add location count column
gov_struct_matrix<-gov_struct_matrix%>%
group_by(address, precinct_id)%>%
mutate(location_count = sum(across(c(religious,school,firestation,
policestation,postoffice,courthouse,
rangerstation,citytownhall)))) %>%
select(!c(source_notes,polling_place_id)) %>%
ungroup()
# subset out locations with multiple categories
mult_cats<-gov_struct_matrix[gov_struct_matrix$location_count>1,]
## remove missing
mult_cats<-mult_cats[complete.cases(mult_cats),]
## school overlaps
# get list of IDs of all locations that have been classed as schools
school_id<-mult_cats[mult_cats$school==1,]
# use list to select rows
school_overlap<-mult_cats[mult_cats$X %in% school_id$X,]
# remove schools rows
school_overlap<-school_overlap[school_overlap$school!=1,]
#make histogram of non-school categories
ggplot(data=school_overlap, aes(x=location_category))+
geom_bar(aes(y = (..count..)/sum(..count..))) +
labs(title='Overlap with Schools (Structure Data)', y='Percentage', x='Location Category')+
scale_y_continuous(labels=percent)
# get counts of overlaps
school_overlap_sum<-school_overlap%>%
mutate(police_sum=sum(policestation),
gov_sum=sum(citytownhall),
post_sum=sum(postoffice),
relig_sum=sum(religious),
court_sum=sum(courthouse),
rang_sum=sum(rangerstation),
lib_sum=sum(library))%>%
select(c(location_type,police_sum,gov_sum,post_sum,relig_sum,court_sum,
rang_sum,lib_sum))%>%
pivot_longer(cols=!location_type,
names_to='structure',
values_to = 'number')
school_overlap_sum<-unique(school_overlap_sum)
#remove zero count categories
school_overlap_sum<-school_overlap_sum[school_overlap_sum$number>0,]
############################################# Keyword structure overlap
#read in poll locations
setwd(D3)
poll<-read.csv('polllocation_and_structure.csv')
############## merge poll and keyword index
polltest<-cbind(poll, keyword_matrix)
#remove empty columns
polltest<-subset(polltest, select=-c(source_notes,polling_place_id, library))
str(polltest)
polltest<-subset(polltest, select=-c(source_notes,polling_place_id))
#remove structure location codings
polltest$location_category=NA
#add in keyword codings conditionally
polltest<-polltest%>%
mutate(location_category = case_when(mult_indx==1 ~ 'multiple',
lib_indx==1 ~ 'library',
gov_indx==1 ~ 'citytownhall',
cent_indx==1 ~ 'reccenter',
relig_indx==1 ~ 'religious',
schl_indx==1 ~ 'school',
apt_indx==1 ~ 'apartment',
club_indx==1 ~ 'club',
fire_indx==1 ~ 'firestation',
vet_indx==1 ~ 'veteran',
sen_indx==1 ~ 'senior',
.default = location_category))
# subset out locations with multiple categories that are schools
mult_cats2<-polltest[polltest$mult_indx==1 & polltest$schl_indx==1,]
## remove missing
mult_cats2<-mult_cats2[complete.cases(mult_cats2),]
## school overlaps counts
cats_sum<-mult_cats2%>%
mutate(lib_sum=sum(lib_indx),
gov_sum=sum(gov_indx),
cent_sum=sum(cent_indx),
relig_sum=sum(relig_indx),
schl_sum=sum(schl_indx),
apt_sum=sum(apt_indx),
club_sum=sum(club_indx),
fire_sum=sum(fire_indx),
vet_sum=sum(vet_indx),
sen_sum=sum(sen_indx))%>%
select(c(location_category,lib_sum,gov_sum,cent_sum,relig_sum,apt_sum,club_sum,fire_sum,vet_sum,
sen_sum))%>%
pivot_longer(cols=!location_category,
names_to='structure',
values_to = 'number')
cats_sum<-unique(cats_sum)
#remove zero count categories
cats_sum<-cats_sum[cats_sum$number>0,]
#make histogram of non-school categories
ggplot(data=cats_sum, aes(x=structure))+
geom_bar(aes(y = (number)/sum(number)), stat='identity') +
labs(title='Overlap with Schools (Structure and Keyword)', y='Percentage', x='Location Category')+
scale_y_continuous(labels=percent)
